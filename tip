js 기초문법

1.변수

let : 변수를 선언하고 재할당도 가능 언제든 값을 바꿀 수 있음
const : 변수에 한번 값을 할당하면 다시 값을 바꿀 수 없음
var : let의 옛날버전. let과 작동원리는 같으나 호이스팅과같은 문제가 있음 (다음 비디오에서 자세히 다룰 예정)

const 상수 변하고 싶지 않은값
let 이랑 var 의 차이 비슷한데
let은 선언된 함수안에서만 사용이 가능함
    또한 초기화되지 않으며 접근시 에러발생

var는 내부 외부 무시하고 전역에서 접근가능함. 그래서 var를 안씀.
    초기값이 indefined 로 설정되어 에러없이 접근가능.
 
 *호이스팅(Hoisting)**은 JavaScript에서 변수와 함수의 선언이 실행 전에 코드의 최상단으로 끌어올려지는 것처럼 동작하는 현상



String: 문자열 타입이라고도 한다. “” 큰따옴표나 ‘’ 작은따옴표 안에 들어가 있는 값을 string 타입이라고 함
숫자 : 숫자타입. 양수, 음수 소수 다 숫자 타입
boolean : 논리연산에 많이 쓰이는 타입으로 true, false 단 두개의 값만 있다.

2.배열
pop() : 배열 끝에있는 아이템을 제거, 그 아이템값을 리턴
push(‘아이템’): 배열 끝에 아이템 추가, 배열의 최종 길이 리턴
includes(‘아이템’): 배열에 아이템이 포함되어있으면 true리턴 아니면 false 리턴
indexOf(‘아이템’): 아이템의 인덱스 번호를 리턴
slice(시작점, 끝점): 시작점~끝점(미포함) 까지 배열을 복사해서 리턴
좀더 다양한 사용법 참고 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
splice(시작점,개수): 시작점부터 개수만큼 실제 배열에서 아이템 제거
length : 배열 함수는 아니지만 배열의 크기를 리턴해주는 속성

3.switch문
switch
조금더 간결하고 의미가 명확해 보인다는 장점이 있음
case가 값으로 딱 정해진 경우에만 사용가능
조건이 비교식일 경우 사용 불가

let food = '햄버거'
switch(food){
    case '피자':
        console.log("피자를 주세요")
        break;
    case '햄버거':
        console.log("햄버거를 주세요")
        break;
    default:
        console.log("메뉴에 없는 음식입니다")
}
case마다 break를 넘겨줘야하는 이유는 그렇지 않으면 밑에 케이스도 다 들르기 때문이다


4. 삼항 연산자
if문을 간단하게 표현할 수 있다.
조건에 따라 실행하는 내용이 한가지일때 쓰기 좋다
조건에따라 실행하는 내용이 다르다
조건식? 참일때 : 거짓일때

let food = '햄버거'
let answer = food == '햄버거'? '햄버거 좋아':'햄버거 싫어'
연산식을 붙여서 더 많은 조건 표현도 가능하다
let food = '햄버거'

if(food == '피자'){
  console.log('피자좋아')
}else if(food == '햄버거'){
  console.log('햄버거 좋아')
}else{
  console.log("다 싫어")
}

// 위의 if문을 삼항연산자로 표현하면 
let answer = food =="피자"?"피자좋아":food == '햄버거'?'햄버거 좋아':"다 싫어"
console.log(answer)

5.for문
for in은 객체의 키 또는 배열의 인덱스를 순회합니다. 배열뿐만 아니라 객체에서도 사용할 수 있습니다.